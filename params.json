{"name":"Sobitmap","tagline":"Bitmap decoder, handle resize & quality & compress stuff following user's configurations.","body":"# SoBitmap\r\nSoBitmap is not an ImageLoader, it born for process single bitmap. Some conditions, we want a image displayed in some limit, such as the max size, the memory cost and its format. SoBitmap handle these all for you, then release you to concern the real important things. You can totally use SoBitmap as a black box, the only things you need care are the input configuration and the output bitmap.\r\n\r\n# Feature\r\n\r\n- support local file, MediaStore and network stream\r\n- support two config way:\r\n\r\n\t1. exact limit include max input, max output, and compress quality down step\r\n\t2. fuzzy limit that you only need set a level or just by default.\r\n- use okhttp as httpclient for downloading, I think we can trust it(Shall we have a choice about it?)\r\n- all callback heppen in UI thread, so relax about it\r\n\r\n# Usage\r\n\r\n### Include in your project\r\n\r\n- Gradle\r\n\r\n```\r\nrepositories {\r\n    maven { url \"https://oss.sonatype.org/content/repositories/snapshots\" }\r\n}\r\n\r\ndependencies {\r\n\tcompile 'com.github.airk000:sobitmap:0.1.+'\r\n}\r\n```\r\n\r\n### Permissions\r\n\r\n```\r\n<!-- if SoBitmap need to load image from network -->\r\n<uses-permission android:name=\"android.permission.INTERNET\" />\r\n<!-- if your want use external storage for cache -->\r\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\r\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\r\n```\r\n\r\n### Min SDK\r\n\r\nAPI9 (Android2.3)\r\n\r\n### Custom display option\r\n\r\n#####Exactly\r\n```\r\nOptions.ExactOptionsBuilder builder = new Options.ExactOptionsBuilder();\r\nbuilder.step(10)\r\n        .format(Bitmap.CompressFormat.JPEG)\r\n        .maxOutput(200)\r\n        .maxInput(10 * 1000)\r\n        .maxSize(5000);\r\nOptions ops = builder.build();\r\n```\r\n\r\n#####Fuzzy\r\n```\r\nOptions.FuzzyOptionsBuilder builder = new Options.FuzzyOptionsBuilder();\r\nbuilder.maxSize(5000)\r\n        .format(Bitmap.CompressFormat.PNG)\r\n        .level(Options.QualityLevel.HIGH);\r\nOptions ops = builder.build();\r\n```\r\n\r\n#####Change the default option\r\n```\r\nSoBitmap.getInstance(context).setDefaultOption(myCustomOps);\r\n```\r\n\r\n### Hunting bitmap\r\n\r\n```\r\nSoBitmap.getInstance(this).hunt(uri, new Callback() {\r\n            @Override\r\n            public void onHunted(Bitmap bitmap, BitmapFactory.Options options) {\r\n                imageView.setImageBitmap(bitmap);\r\n            }\r\n\r\n            @Override\r\n            public void onException(HuntException e) {\r\n                textView.setText(e.toString());\r\n            }\r\n        });\r\n```\r\n\r\n# *TODO*:\r\n\r\n- Multi thread speed up the decoding duration\r\n\r\n# License\r\n\r\n```\r\nCopyright 2015 Kevin Liu\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}